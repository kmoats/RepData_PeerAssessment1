qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
data(movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
g
print(g)
summary(g)
p <- g + geom_point()
print(p)
g + geom_smooth()
p + geom_smooth()
library(dplyr)
install.packages("dplyr")
library(dplyr)
qunif(0.75,0,1)
quantile(qunif(0.75,0,1))
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
temp
mean(temp)
quantile(temp)
clear()
clear
rm()
library("jsonlite", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:jsonlite", unload=TRUE)
install.packages("jsonlite")
library("Rcpp", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("Rcpp")
install.packages("knitr")
install.packages("markdown")
install.packages("rmarkdown")
install.packages("slidify")
qnorm(mean = 1100, sd = 75)
qnorm(0.95, mean = 1100, sd = 75)
qnorm(0.95, mean = 1100, sd = 7.5)
sessionInfo()
install.packages("cacher")
library(dplyr)
fileurl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
if(!file.exists("activity.zip")) {
download.file(fileurl, destfile = "activity.zip", method = "curl")
date_downloaded <- date()
unzip("activity.zip")
}
activitydata <- read.csv("activity.csv")
# Create a data frame containing the date and number of steps for each day
dailysteps <- summarise(group_by(activitydata, date), sum(steps))
names(dailysteps) <- c("date","totalsteps")
# Plot histogram of number of steps across all days
with(dailysteps, plot(date, totalsteps, type = "l"))
# Calculate mean and median total number of steps per day
meandailysteps <- mean(dailysteps$totalsteps, na.rm = TRUE)
mediandailysteps <- median(dailysteps$totalsteps, na.rm = TRUE)
# Create a data frame containing the time interval and average number of steps for each time interval
intervalsteps <- summarise(group_by(activitydata, interval), mean(steps, na.rm = TRUE))
names(intervalsteps) <- c("interval","meansteps")
# Make a time series plot of average # of steps in each time interval vs the time interval
with(intervalsteps, plot(interval, meansteps, type = "l"))
# Determine which time interval contains the largest average # of steps
maxmeansteps <- intervalsteps[which(intervalsteps$meansteps == max(intervalsteps$meansteps)),]
# Calculate the total number of missing values in the dataset (i.e. the total number of rows with NAs)
totalNAs <- sum(is.na(activitydata$steps))
# Devise a strategy for filling in all of the missing values in the dataset. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
activitydata <- mutate(activitydata, stepsinterpolated = steps)
# Create a new dataset that is equal to the original dataset but with the missing data filled in.
# Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment?
# What is the impact of imputing missing data on the estimates of the total daily number of steps?
# Calculate the total number of missing values in the dataset (i.e. the total number of rows with NAs)
totalNAs <- sum(is.na(activitydata$steps))
# Devise a strategy for filling in all of the missing values in the dataset. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
activitydata <- mutate(activitydata, -stepsinterpolated)
# Create a new dataset that is equal to the original dataset but with the missing data filled in.
# Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment?
# What is the impact of imputing missing data on the estimates of the total daily number of steps?
library(dplyr)
fileurl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
if(!file.exists("activity.zip")) {
download.file(fileurl, destfile = "activity.zip", method = "curl")
date_downloaded <- date()
unzip("activity.zip")
}
activitydata <- read.csv("activity.csv")
# Create a data frame containing the date and number of steps for each day
dailysteps <- summarise(group_by(activitydata, date), sum(steps))
names(dailysteps) <- c("date","totalsteps")
# Plot histogram of number of steps across all days
with(dailysteps, plot(date, totalsteps, type = "l"))
# Calculate mean and median total number of steps per day
meandailysteps <- mean(dailysteps$totalsteps, na.rm = TRUE)
mediandailysteps <- median(dailysteps$totalsteps, na.rm = TRUE)
# Create a data frame containing the time interval and average number of steps for each time interval
intervalsteps <- summarise(group_by(activitydata, interval), mean(steps, na.rm = TRUE))
names(intervalsteps) <- c("interval","meansteps")
# Make a time series plot of average # of steps in each time interval vs the time interval
with(intervalsteps, plot(interval, meansteps, type = "l"))
# Determine which time interval contains the largest average # of steps
maxmeansteps <- intervalsteps[which(intervalsteps$meansteps == max(intervalsteps$meansteps)),]
# Calculate the total number of missing values in the dataset (i.e. the total number of rows with NAs)
totalNAs <- sum(is.na(activitydata$steps))
# Devise a strategy for filling in all of the missing values in the dataset. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
#activitydata <- mutate(activitydata, stepsinterpolated = steps)
# Create a new dataset that is equal to the original dataset but with the missing data filled in.
# Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment?
# What is the impact of imputing missing data on the estimates of the total daily number of steps?
which(activitydata$steps = NA)
which(activitydata$steps == NA)
which(activitydata$steps == "NA")
ls
activitydata
activitydatacompleted <- activitydata
activitydatacompleted
which(activitydatacompleted$steps == NA)
which(activitydatacompleted$steps == "NA")
which(activitydatacompleted == "NA")
which(activitydatacompleted[,1] == "NA")
activitydatacompleted$steps
which(is.na(activitydatacompleted$steps))
activitydatacompleted[which(is.na(activitydatacompleted$steps))]
activitydatacompleted[which(is.na(activitydatacompleted$steps)),]
activitydatacompleted[which(is.na(activitydatacompleted$steps)),]
dailysteps
intervalsteps
activitydatacompleted[which(is.na(activitydatacompleted$steps)),]
intervalsteps
intervalsteps$meansteps[which(interval = 5),]
intervalsteps[which(interval = 5),meansteps]
intervalsteps[which(interval = 5),"meansteps"]
intervalsteps[which(interval = 5),intervalsteps$meansteps]
intervalsteps[which(interval = 5),intervalsteps.meansteps]
intervalsteps$meansteps[which(interval == 5),]
intervalsteps$meansteps[which(intervalsteps$interval == 5),]
intervalsteps[which(intervalsteps$interval == 5),intervalsteps$meansteps]
intervalsteps[which(intervalsteps$interval == 5),"intervalsteps$meansteps"]
intervalsteps[which(intervalsteps$interval == 5),"meansteps"]
intervalsteps[which(intervalsteps$interval == 5),"meansteps"]
activitydatacompleted[which(is.na(activitydatacompleted$steps)),]
intervalsteps[which(intervalsteps$interval == 5),"meansteps"]
activitydatacompleted[which(is.na(activitydatacompleted$steps)),"interval"]
activitydatacompleted[which(is.na(activitydatacompleted$steps)),]
dateNA <- activitydatacompleted[which(is.na(activitydatacompleted$steps)),"date"]
intervalNA <- activitydatacompleted[which(is.na(activitydatacompleted$steps)),"interval"]
intervalsteps[which(intervalsteps$date == dateNA | intervalsteps$interval == intervalNA),"meansteps"]
dateNA <- activitydatacompleted[which(is.na(activitydatacompleted$steps)),"date"]
dateNA
intervalNA <- activitydatacompleted[which(is.na(activitydatacompleted$steps)),"interval"]
intervalNA
activitydatacompleted[which(is.na(activitydatacompleted$steps)),]
intervalsteps[which(intervalsteps$date == dateNA & intervalsteps$interval == intervalNA),"meansteps"]
intervalsteps[which(intervalsteps$date == dateNA & intervalsteps$interval == intervalNA),]
activitydatacompleted[which(is.na(activitydatacompleted$steps)),]
activitydatacompleted[which(is.na(activitydatacompleted$steps)),]
rows(activitydatacompleted[which(is.na(activitydatacompleted$steps)),])
row(activitydatacompleted[which(is.na(activitydatacompleted$steps)),])
unique(row(activitydatacompleted[which(is.na(activitydatacompleted$steps)),]))
row(activitydatacompleted[which(is.na(activitydatacompleted$steps)),"date"])
activitydatacompleted[which(is.na(activitydatacompleted$steps)),]
row.names(activitydatacompleted[which(is.na(activitydatacompleted$steps)),])
NArows <- row.names(activitydatacompleted[which(is.na(activitydatacompleted$steps)),])
NArows
activitydatacompleted[NArows,]
which(is.na(activitydatacompleted$steps))
NArows <- which(is.na(activitydatacompleted$steps))
NArows
activitydatacompleted[NArows,]
activitydatacompleted[NArows,] <- 0
intervalsteps
activitydatacompleted[NArows, ]
activitydatacompleted <- activitydata
activitydatacompleted[NArows, ]
activitydatacompleted <- activitydata
NArows <- which(is.na(activitydatacompleted$steps))
dateNA <- activitydatacompleted[NArows,"date"]
intervalNA <- activitydatacompleted[NArows,"interval"]
activitydatacompleted[NArows,"steps"] <- intervalsteps[which(intervalsteps$date == dateNA & intervalsteps$interval == intervalNA),"meansteps"]
activitydatacompleted[NArows,"steps"] <- intervalsteps[which(intervalsteps$date in dateNA & intervalsteps$interval in intervalNA),"meansteps"]
activitydatacompleted[NArows,"steps"] <- intervalsteps[intervalsteps$date in dateNA & intervalsteps$interval in intervalNA,"meansteps"]
activitydatacompleted[NArows,"steps"] <- intervalsteps[which(intervalsteps$date %in% dateNA & intervalsteps$interval %in% intervalNA),"meansteps"]
activitydatacompleted[NArows,"steps"] <- intervalsteps[intervalsteps$date %in% dateNA & intervalsteps$interval %in% intervalNA,"meansteps"]
activitydatacompleted[NArows,"steps"]  <- round(intervalsteps[as.numeric(names(intervalsteps)) %in% activitydatacompleted[NArows,"meansteps"]])
activitydatacompleted[NArows,"steps"]  <- round(intervalsteps$meansteps) %in% activitydatacompleted[NArows,"meansteps"]])
activitydatacompleted[NArows,"steps"]  <- round(intervalsteps$meansteps) %in% activitydatacompleted[NArows,"meansteps"])
activitydatacompleted[NArows,"steps"]  <- round(intervalsteps$meansteps) %in% activitydatacompleted[NArows,"meansteps"]
intervalstepscompleted
activitydatacompleted
tail(activitydatacompleted)
activitydatacompleted[NArows,"steps"]  <- intervalsteps$meansteps %in% activitydatacompleted[NArows,"meansteps"]
tail(activitydatacompleted)
# Calculate the total number of missing values in the dataset (i.e. the total number of rows with NAs)
totalNAs <- sum(is.na(activitydata$steps))
# Devise a strategy for filling in all of the missing values in the dataset. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
#activitydata <- mutate(activitydata, stepsinterpolated = steps)
#rows (dates and intervals) with NAs
activitydatacompleted <- activitydata
NArows <- which(is.na(activitydatacompleted$steps))
dateNA <- activitydatacompleted[NArows,"date"]
intervalNA <- activitydatacompleted[NArows,"interval"]
activitydatacompleted[NArows,"steps"] <- intervalsteps[which(intervalsteps$date == dateNA & intervalsteps$interval == intervalNA),"meansteps"]
activitydatacompleted[NArows,"steps"]  <- intervalsteps$meansteps %in% activitydatacompleted[NArows,"meansteps"]
# Create a new dataset that is equal to the original dataset but with the missing data filled in.
# Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment?
# What is the impact of imputing missing data on the estimates of the total daily number of steps?
activitydatacompleted
tail(activitydatacompleted)
activitydatacompleted[NArows,"steps"]  <- round(intervalsteps$meansteps) %in% activitydatacompleted[NArows,"meansteps"]
activitydatacompleted
NArows <- which(is.na(activitydatacompleted$steps))
NArows
tail(activitydata)
activitydatacompleted[NArows,"steps"]
source('~/.active-rstudio-document', echo=TRUE)
activitydatacompleted[NArows,"steps"]
intervalsteps$meansteps
activitydatacompleted[NArows,"steps"]
source('~/.active-rstudio-document', echo=TRUE)
activitydatacompleted[NArows,"steps"]
round(intervalsteps$meansteps)
activitydatacompleted[NArows,"steps"]
activitydatacompleted[NArows,"steps"]
activitydatacompleted[NArows,"interval"]
activitydatacompleted[NArows,"steps"]  <- round(intervalsteps$meansteps) %in% activitydatacompleted[NArows,"interval"]
activitydatacompleted[NArows,"steps"]
names(dailysteps)
activitydatacompleted[NArows,"steps"]  <- round(intervalsteps[as.numeric(names(intervalsteps)) %in% activitydatacompleted[NArows,"interval"]])
activitydatacompleted[NArows,"steps"]  <- round(intervalsteps[as.numeric(names(intervalsteps)) %in% activitydatacompleted[NArows,"interval"]])
intervalsteps$meansteps %in% activitydatacompleted[NArows,"interval"]]
intervalsteps$meansteps %in% activitydatacompleted[NArows,"interval"
]
activitydatacompleted[NArows,"interval"]
intervalsteps$meansteps
intervalsteps$meansteps %in% activitydatacompleted[NArows,"interval"]
intervalsteps$interval %in% activitydatacompleted[NArows,"interval"]
intervalsteps[intervalsteps$interval %in% activitydatacompleted[NArows,"interval"]]
intervalsteps[intervalsteps$interval %in% activitydatacompleted[NArows,"interval"], "meansteps"]
activitydatacompleted[NArows,"steps"]  <- intervalsteps[intervalsteps$interval %in% activitydatacompleted[NArows,"interval"], "meansteps"]
activitydatacompleted[NArows,"steps"]
activitydatacompleted[,"steps"]
activitydatacompleted[NArows,"steps"]  <- round(intervalsteps[intervalsteps$interval %in% activitydatacompleted[NArows,"interval"], "meansteps"])
activitydatacompleted
tail(activitydatacompleted)
# Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
activitydatacompleted <- mutate(activitydatacompleted, weekday = weekdays(activitydatacompleted$date))
# Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis).
weekdays(activitydatacompleted$date)
weekdays(as.Date(activitydatacompleted$date))
# Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
activitydatacompleted <- mutate(activitydatacompleted, weekday = weekdays(as.Date(activitydatacompleted$date)))
# Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis).
activitydatacompleted
activitydatacompleted$weekday
activitydatacompleted[which(activitydatacompleted$weekday == "Monday"), "weekday"] <- "weekday"
activitydatacompleted
activitydatacompleted[which(activitydatacompleted$weekday == "[Mon][Tues][Wednes][Thurs][Fri]day"), "weekday"] <- "weekday"
activitydatacompleted[which(activitydatacompleted$weekday == "[Satur][Sun]day"), "weekday"] <- "weekend"
activitydatacompleted
activitydatacompleted[which(activitydatacompleted$weekday == "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday"), "weekday"] <- "weekday"
activitydatacompleted[which(activitydatacompleted$weekday == "Saturday" | "Sunday"), "weekday"] <- "weekend"
activitydatacompleted[which(activitydatacompleted$weekday == ("Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday")), "weekday"] <- "weekday"
activitydatacompleted[which(activitydatacompleted$weekday == ("Saturday" | "Sunday")), "weekday"] <- "weekend"
activitydatacompleted[which(activitydatacompleted$weekday == c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")), "weekday"] <- "weekday"
activitydatacompleted[which(activitydatacompleted$weekday %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")), "weekday"] <- "weekday"
activitydatacompleted
activitydatacompleted[which(activitydatacompleted$weekday %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")), "weekday"] <- "weekday"
activitydatacompleted[which(activitydatacompleted$weekday %in% c("Saturday", "Sunday")), "weekday"] <- "weekend"
activitydatacompleted
activitydatacompleted[which(activitydatacompleted$weekday %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")), "weekday"] <- as.factor("weekday")
activitydatacompleted[which(activitydatacompleted$weekday %in% c("Saturday", "Sunday")), "weekday"] <- as.factor("weekend")
str(activitydatacompleted)
activitydatacompleted$weekday <- as.factor(activitydatacompleted$weekday)
activitydatacompleted <- mutate(activitydatacompleted, weekday = as.factor(weekdays(as.Date(activitydatacompleted$date))))
activitydatacompleted[which(activitydatacompleted$weekday %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")), "weekday"] <- "weekday"
activitydatacompleted[which(activitydatacompleted$weekday %in% c("Saturday", "Sunday")), "weekday"] <- "weekend"
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
attach(dailysteps)
hist(totalsteps)
hist(date)
hist(as.numeric(date))
hist(as.numeric(date), ylim = 10000)
hist(as.numeric(date), ylim = "10000")
hist(as.numeric(date), ylim <- 10000)
hist(as.numeric(date), ylim = 10000)
hist(as.numeric(date), ylim = "10000")
hist(as.numeric(date))
with(activitydatacompleted[which(activitydatacompleted$weekday == "weekday")], plot(date, totalsteps, type = "l"))
with(activitydatacompleted[which(activitydatacompleted$weekday == "weekday"),], plot(date, totalsteps, type = "l"))
with(activitydatacompleted, plot(date[which(activitydatacompleted$weekday == "weekday"),], totalsteps[which(activitydatacompleted$weekday == "weekday"),], type = "l"))
densityplot(~steps|weekday.f,
main="Density Plot by Number of Cylinders",
xlab="Miles per Gallon")
attach(activitydatacompleted)
densityplot(~steps|weekday.f,
main="Density Plot by Number of Cylinders",
xlab="Miles per Gallon")
library(lattice)
attach(activitydatacompleted)
densityplot(~steps|weekday.f,
main="Density Plot by Number of Cylinders",
xlab="Miles per Gallon")
library(lattice)
attach(activitydatacompleted)
densityplot(~steps|weekday,
main="Density Plot by Number of Cylinders",
xlab="Miles per Gallon")
intervalsteps <- summarise(group_by(activitydatacompleted, interval, weekday), mean(steps, na.rm = TRUE))
names(intervalsteps) <- c("interval","meansteps", "weekday")
intervalsteps <- summarise(group_by(activitydatacompleted, interval, weekday), mean(steps, na.rm = TRUE))
names(intervalsteps) <- c("interval","meansteps", "weekday")
intervalsteps
intervalsteps <- summarise(group_by(activitydatacompleted, interval, weekday), mean(steps, na.rm = TRUE))
names(intervalsteps) <- c("interval", "weekday", "meansteps")
intervalsteps
densityplot(~meansteps|weekday,
main="Number of Steps per time interval on Weekday and Weekend",
xlab="Interval")
ylab="Average Number of Steps")
library(lattice)
attach(intervalsteps)
densityplot(~meansteps|weekday,
main="Number of Steps per time interval on Weekday and Weekend",
xlab="Interval")
ylab="Average Number of Steps")
library(lattice)
attach(intervalsteps)
densityplot(interval~meansteps|weekday,
main="Number of Steps per time interval on Weekday and Weekend",
xlab="Interval")
ylab="Average Number of Steps")
library(lattice)
attach(intervalsteps)
densityplot(~interval|weekday,
main="Number of Steps per time interval on Weekday and Weekend",
xlab="Interval")
ylab="Average Number of Steps")
library(lattice)
attach(intervalsteps)
densityplot(~interval~meansteps|weekday,
main="Number of Steps per time interval on Weekday and Weekend",
xlab="Interval")
ylab="Average Number of Steps")
with(intervalsteps, plot(interval, meansteps, type = "l"))
require(ggplot2)
qplot(intervalsteps.factor, interval)
require(ggplot2)
qplot(intervalsteps.weekday, interval)
library(lattice)
attach(intervalsteps)
xyplot(meansteps~interval|weekday,
main="Number of Steps per time interval on Weekday and Weekend",
xlab="Interval")
ylab="Average Number of Steps")
library(lattice)
attach(intervalsteps)
xyplot(meansteps~interval|weekday,
main="Number of Steps per time interval on Weekday and Weekend",
xlab="Interval")
ylab="Average Number of Steps"
type = "l")
library(lattice)
attach(intervalsteps)
xyplot(meansteps~interval|weekday,
main="Number of Steps per time interval on Weekday and Weekend",
xlab="Interval"
ylab="Average Number of Steps"
type = "l"
)
library(lattice)
attach(intervalsteps)
xyplot(meansteps~interval|weekday,
main="Number of Steps per time interval on Weekday and Weekend",
xlab="Interval"
ylab="Average Number of Steps"
type = "l")
library(lattice)
attach(intervalsteps)
xyplot(meansteps~interval|weekday,
main="Number of Steps per time interval on Weekday and Weekend",
xlab="Interval",
ylab="Average Number of Steps",
type = "l")
with(dailysteps, hist(date, totalsteps, type = "l"))
with(dailysteps, hist(as.numeric(date), totalsteps, type = "l"))
with(dailysteps, hist(as.numeric(date), breaks=totalsteps, type = "l"))
with(dailysteps, hist(as.numeric(date), breaks=61, type = "l"))
with(dailysteps, hist(as.Date(date), breaks=61, type = "l"))
with(dailysteps, hist(as.Date(date), breaks=61, freq = steps, type = "l"))
with(dailysteps, hist(as.numeric(date), breaks=61, freq = steps, type = "l"))
with(dailysteps, hist(as.numeric(date), breaks=date, freq = steps, type = "l"))
with(dailysteps, hist(as.numeric(date), breaks=date, freq = steps))
with(dailysteps, hist(as.numeric(date), breaks=as.numeric(date), freq = steps))
with(dailysteps, hist(as.Date(date), breaks=as.Date(date), freq = steps))
with(dailysteps, hist(as.Date(date), breaks=as.Date(date), probability = steps))
with(dailysteps, hist(as.Date(date), breaks=61, probability = steps))
with(dailysteps, hist(as.Date(date), breaks=61, probability = "steps"))
warnings()
with(dailysteps, hist(as.Date(date), breaks="date", probability = "steps"))
with(dailysteps, hist(as.numeric(date), breaks="date", probability = "steps"))
with(dailysteps, hist(as.numeric(date), breaks="Sturges", probability = "steps"))
with(dailysteps, hist(as.numeric(date), breaks="Sturges", freq = TRUE, probability = "steps"))
with(dailysteps, hist(as.numeric(date), breaks=61, freq = TRUE, probability = "steps"))
hist(1,1)
hist(1,2)
hist(1)
hist(c(1:2))
"date"*10
"date"*c(1:10)
as.numeric("date")*c(1:10)
as.char("date")*c(1:10)
as.character("date")*c(1:10)
as.factor("date")*c(1:10)
as.Date("date")*c(1:10)
activitydata
hist(activitydata$date)
hist(as.numeric(activitydata$date))
hist(as.numeric(activitydata$date), ylim = c(1:10000))
hist(as.numeric(activitydata$date), ylim = c(1,10000))
hist(as.numeric(activitydata$date), activitydata$steps, ylim = c(1,10000))
hist(as.numeric(activitydata$date), activitydata$steps)
hist(as.numeric(activitydata$date*activitydata$steps))
activitydata$date*activitydata$steps
as.Date(activitydata$date)*activitydata$steps
as.character(activitydata$date)*activitydata$steps
with(activitydata, plot(date, steps))
with(activitydata, plot(date, steps), type = "h")
with(activitydata, plot(date, as.numeric(steps)))
with(activitydata, plot(date, sum(steps))
with(activitydata, plot(date, sum(steps)))
with(activitydata, plot(date, sum(steps)))
with(activitydata, plot(date, sum(activitydata$steps)))
with(activitydata, plot(date~steps))
with(activitydata, plot(steps~date))
with(activitydata, plot(steps~date, type="h"))
with(activitydata, plot(steps~date))
with(activitydata, plot(sum(steps)~date))
barplot(activitydata$steps)
barplot(activitydata$steps, activitydata$date)
barplot(activitydata$steps~activitydata$date)
barplot(activitydata$steps)
library(ggplot2)
qplot(date, data = activitydata, geom = histogram)
qplot(date, data = activitydata, geom = "histogram")
plot(date, data = activitydata, geom = "histogram")
plot(date, data = activitydata)
plot(activitydata$date)
plot(activitydata$date, activitydata$steps)
plot(activitydata$date, apply(activitydata$steps, sum))
plot(activitydata$date, apply(sum activitydata$steps))
plot(activitydata$date, apply(sum, activitydata$steps))
plot(dailysteps$date, dailysteps$steps)
plot(dailysteps$date, dailysteps$totalsteps)
plot(dailysteps$date, dailysteps$totalsteps, type = "h")
plot(dailysteps$date, dailysteps$totalsteps, type = "hist")
hist(dailysteps$date, dailysteps$totalsteps)
hist(dailysteps$date)
hist(as.numeric$dailysteps$date))
hist(as.numeric(dailysteps$date))
hist(as.numeric(dailysteps$date), breaks="date")
hist(as.numeric(dailysteps$date))
hist(as.Date(dailysteps$date))
hist(as.Date(dailysteps$date), breaks = dailysteps$date)
hist(as.Date(dailysteps$date), breaks = as.Date(dailysteps$date))
hist(as.Date(dailysteps$totalsteps), breaks = as.Date(dailysteps$date))
hist(dailysteps$totalsteps, breaks = as.Date(dailysteps$date))
hist(dailysteps$totalsteps, breaks = dailysteps$date)
hist(dailysteps$totalsteps, breaks = "date")
hist(dailysteps$totalsteps)
hist(dailysteps$totalsteps~dailysteps$date)
hist(dailysteps$date, probability = dailysteps$totalsteps)
hist(dailysteps$date, freq = FALSE, probability = dailysteps$totalsteps)
hist(dailysteps$date, freq = FALSE)
hist(as.numeric(dailysteps$date), freq = FALSE, probability = dailysteps$totalsteps)
hist(as.numeric(dailysteps$date), freq = TRUE, probability = dailysteps$totalsteps)
hist(activitydata$date, freq = FALSE)
hist(as.numeric(activitydata$date), freq = TRUE, probability = dailysteps$totalsteps)
hist(as.numeric(activitydata$date))
hist(as.numeric(activitydata$date))
hist(as.numeric(activitydata$date), freq = FALSE, probability = dailysteps$totalsteps)
hist(as.numeric(activitydata$date), freq = TRUE, probability = dailysteps$totalsteps)
hist(as.numeric(activitydata$date), freq = TRUE, probability = dailysteps$totalsteps, ylim = c(1:10000))
hist(as.numeric(activitydata$date), freq = TRUE, probability = dailysteps$totalsteps, ylim = c(1,10000))
hist(as.numeric(activitydata$date), freq = FALSE, probability = dailysteps$totalsteps, ylim = c(1,10000))
with(activitydata, plot(date))
with(activitydata, plot(date, ylim = (1,10000)))
with(activitydata, plot(date, ylim = c(1,10000)))
with(activitydata, plot(date, ylim = (1,10000)))
with(activitydata, plot(date, ylim = 1,10000))
with(activitydata, plot(totalsteps~date))
with(activitydata, plot(steps~date))
with(dailysteps, plot(totalsteps~date))
with(dailysteps, plot(totalsteps~date, type = "hist"))
with(dailysteps, plot(totalsteps~date, type = "h"))
with(dailysteps, plot(totalsteps, date, type = "h"))
with(dailysteps, plot(date, totalsteps, type = "h"))
with(dailysteps, plot(date, totalsteps, type = "l"))
with(dailysteps, plot(date, totalsteps))
with(dailysteps, plot(date, totalsteps, type = "hl"))
with(dailysteps, plot(date, totalsteps, type = "p"))
with(dailysteps, plot(date, totalsteps, type = "p"))
with(dailysteps, plot(date, totalsteps, type = "h"))
getwd()
setwd("Documents/Computing/Data Science/Data Science - Johns Hopkins/5 - Reproducible Research/Assignments/Assignment 1/RepData_PeerAssessment1/")
