install.packages("slidify")
library(datasets)
data(iris)
?iris
sepal.length
Sepal.Length
iris("Sepal.Length")
iris["Sepal.Length"]
lapply(mean,iris["Sepal.Length"])
iris
which(iris["Sepal.Length"], "Species" == virginica)
iris[which("Species" == virginica)]
iris[which("Species" == "virginica")]
iris[which(Species == "virginica")]
iris[which(iris.Species == "virginica")]
iris[which(Species == "virginica"),]
iris[which(Species == "virginica"),"Sepal.length"]
iris[which("Species" == "virginica"),"Sepal.length"]
iris[which("Species" == "virginica"),]
iris[which("Species" == virginica),]
iris[which(iris$Species == "virginica"),]
iris[which(iris$Species == "virginica"),Sepal.Length]
iris[which(iris$Species == "virginica"),"Sepal.Length"]
mean(iris[which(iris$Species == "virginica"),"Sepal.Length"])
lapply(mean, iris$Species)
lapply(iris$Species, mean)
lapply(iris$Sepal.Length, mean)
apply(iris$Sepal.Length, mean)
lapply(iris$Sepal.Length, mean)
lapply(iris$Sepal.Length[which["Species" == ""virginica]], mean)
lapply(iris$Sepal.Length[which[Species == ""virginica]], mean)
lapply(iris$Sepal.Length[which[iris$Species == ""virginica]], mean)
lapply(iris$Sepal.Length[which[iris$Species == "virginica"]], mean)
lapply(iris$Sepal.Length[which(iris$Species == "virginica"),], mean)
lapply(iris$Sepal.Length[which(iris$Species == "virginica")], mean)
iris$Sepal.Length[which(iris$Species == "virginica")]
apply(iris$Sepal.Length[which(iris$Species == "virginica")],mean)
sapply(iris$Sepal.Length[which(iris$Species == "virginica")],mean)
tapply(iris$Sepal.Length[which(iris$Species == "virginica")],mean)
mapply(iris$Sepal.Length[which(iris$Species == "virginica")],mean)
apply(iris$Sepal.Length[which(iris$Species == "virginica")],mean)
apply(iris[which(iris$Species == "virginica"),Sepal.Length],mean)
lapply(iris[which(iris$Species == "virginica"),Sepal.Length],mean)
lapply(iris[which(iris$Species == "virginica"),"Sepal.Length"],mean)
apply(iris[which(iris$Species == "virginica"),"Sepal.Length"],mean)
iris[which(iris$Species == "virginica"),"Sepal.Length"]
apply(iris[which(iris$Species == "virginica"),"Sepal.Length"],2,mean)
apply(iris[which(iris$Species == "virginica"),],2,mean)
apply(iris[which(iris$Species == "virginica"),],2,mean, na.rm = TRUE)
apply(iris,2,mean, na.rm = TRUE)
apply(iris$Sepal.Length,2,mean, na.rm = TRUE)
apply(iris[which(iris$Species == "virginica"),],1,mean, na.rm = TRUE)
apply(iris[which(iris$Species == "virginica"),],1,mean)
apply(iris[which(iris$Species == "virginica"),"Sepal.Length"],1,mean)
apply(iris[which(iris$Species == "virginica"),Sepal.Length],1,mean)
apply(iris[which(iris$Species == "virginica"),iris$Sepal.Length],1,mean)
lapply(iris[which(iris$Species == "virginica"),"Sepal.Length"],mean)
sapply(iris[which(iris$Species == "virginica"),"Sepal.Length"],mean)
iris[which(iris$Species == "virginica"),"Sepal.Length"]
tapply(iris[which(iris$Species == "virginica"),"Sepal.Length"],mean)
mapply(mean, iris[which(iris$Species == "virginica"),"Sepal.Length"])
lapply(iris[which(iris$Species == "virginica"),"Sepal.Length"],mean)
lapply(iris[[which(iris$Species == "virginica"),"Sepal.Length"]],mean)
lapply(iris[[which(iris$Species == "virginica"),Sepal.Length]],mean)
lapply(iris[[which(iris$Species == "virginica"),iris$Sepal.Length]],mean)
lapply(iris[[which(iris$Species == "virginica"),2],mean)
lapply(iris[which(iris$Species == "virginica"),2],mean)
irs
iris
head(iris)
lapply(iris[which(iris$Species == "virginica"),1],mean)
tapply(iris[which(iris$Species == "virginica"),1],mean)
apply(iris[which(iris$Species == "virginica"),1],mean)
apply(iris[which(iris$Species == "virginica"),1],2,mean)
apply(iris[which(iris$Species == "virginica"),1],1,mean)
apply(iris[which(iris$Species == "virginica"),1],mean)
apply(iris[which(iris$Species == "virginica"),1],c[1,2],mean)
apply(iris[which(iris$Species == "virginica"),1],2,mean)
class(iris[which(iris$Species == "virginica"),1])
class(as.list(iris[which(iris$Species == "virginica"),1]))
apply(as.list(iris[which(iris$Species == "virginica"),1],2,mean))
lapply(as.list(iris[which(iris$Species == "virginica"),1],mean))
lapply(as.list(iris[which(iris$Species == "virginica"),1]),mean)
apply(as.list(iris[which(iris$Species == "virginica"),1]),mean)
apply(as.list(iris[which(iris$Species == "virginica"),1]),2,mean)
apply(as.list(iris[which(iris$Species == "virginica"),1]),1,mean)
iris[which(iris$Species == "virginica"),1]
dim(iris[which(iris$Species == "virginica"),1])
dim(as.list(iris[which(iris$Species == "virginica"),1]))
dim(c(iris[which(iris$Species == "virginica"),1]))
dim(iris[which(iris$Species == "virginica"),1])
iris[which(iris$Species == "virginica"),]
dim(iris[which(iris$Species == "virginica"),])
lapply(iris[which(iris$Species == "virginica"),],mean)
lapply(iris[which(iris$Species == "virginica"),],mean, na.rm = TRUE)
lapply(iris[which(iris$Species == "virginica"),],mean, na.rm == TRUE)
lapply(iris[which(iris$Species == "virginica"),],mean, na.rm == "TRUE")
lapply(iris[which(iris$Species == "virginica"),],mean, na.rm = "TRUE")
apply(iris[which(iris$Species == "virginica"),],2,mean, na.rm = "TRUE")
apply(iris[which(iris$Species == "virginica"),],2,mean, na.rm = TRUE)
lapply(iris[which(iris$Species == "virginica"),],mean)
lapply(iris[which(iris$Species == "virginica"),1],mean)
lapply(iris[which(iris$Species == "virginica"),],mean)
lapply(iris[which(iris$Species == "virginica"),],mean, na.rm = TRUE)
lapply(iris[which(Species == "virginica"),],mean, na.rm = TRUE)
lapply(iris[which("Species" == "virginica"),],mean, na.rm = TRUE)
lapply(iris[which(iris$Species == "virginica"),],mean, na.rm = TRUE)
apply(iris, 2, mean)
apply(iris, 1, mean)
apply(iris[,1:4], 2, mean)
vecmeans <- apply(iris[,1:4], 2, mean)
class(vecmeans)
rowMeans(iris[,1:4])
vecmeans <- apply(iris[,1:4], 2, mean)
class(vecmeans)
vecmeans <- apply(iris[which(Species == "virginica"),1:4], 2, mean)
vecmeans <- apply(iris[which(iris$Species == "virginica"),1:4], 2, mean)
vecmeans
vecmeans <- apply(iris[which(iris$Species == "virginica"),Sepal.Length], 2, mean)
vecmeans <- apply(iris[which(iris$Species == "virginica"),iris$Sepal.Length], 2, mean)
vecmeans <- apply(iris[which(iris$Species == "virginica"),"Sepal.Length"], 2, mean)
vecmeans <- apply(iris[which(iris$Species == "virginica"),1], 2, mean)
vecmeans <- apply(iris[which(iris$Species == "virginica"),], 2, mean)
vecmeans <- apply(iris[which(iris$Species == "virginica"),1:4], 2, mean)
vecmeans
vecmeans <- apply(iris[which(iris$Species == "virginica"),1], 2, mean)
vecmeans <- apply(iris[which(iris$Species == "virginica"),1:2], 2, mean)
vecmeans
vecmeans <- apply(iris[which(iris$Species == "virginica"),], 2, mean)
vecmeans <- apply(iris[which(iris$Species == "virginica"),1:4], 2, mean)
vecmeans
library(mtcars)
library(datasets)
data(mtcars)
?mtcars
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars,mean)
mean(mtcars$mpg, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl == 4)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl == 4, mean)
tapply(mtcars$hp, mtcars$cyl = 4, mean)
tapply(mtcars$hp, which(mtcars$cyl = 4), mean)
tapply(mtcars$hp, which(mtcars$cyl == 4), mean)
tapply(mtcars$hp, mtcars$cyl, mean)
avghp <- tapply(mtcars$hp, mtcars$cyl, mean)
avghp
avghp["4"]
avghp["4"]-avghp["8"]
abs[avghp["4"]-avghp["8"]]
abs(avghp["4"]-avghp["8"])
abs(avghp["4",1]-avghp["8",1])
abs(avghp["4",]-avghp["8",])
abs(avghp["4"]-avghp["8"])
debug(ls)
ls
ls()
ls()
debug(ls)
ls()
debug(ls)
ls()
ls()
stop
stop()
ls()
debug(ls)
ls
ls()
set.seed(1)
rpois(5, 2)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
summary(y)
plot(y)
plot(y,x)
plot(x,y)
Rprof()
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof(library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL))
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
x1 <- 1
x2 <- 2
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
y <- 2
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof(library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL))
summaryRprof(library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL))
library(datasets)
summaryRprof()
fit <- lm(y ~ x1 + x2)
summaryRprof(NULL)
getwd()
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
list(
get = function() x,
getInverse = function() {
if (is.null(inverse)) {
inverse <<- solve(x)
}
return(inverse)
}
)
}
## Delegate the solution to makeCacheMatrix object.
cacheSolve <- function(x, ...) {
x$getInverse()
}
makeCacheMatrix(1:4,2,2)
makeCacheMatrix(matrix(1:4,2,2))
inverse
get(makeCacheMatrix)
cacheSolve()
cacheSolve(matrix(1:4,2,2)
cacheSolve(matrix(1:4,2,2)
cacheSolve(matrix(1:4,2,2))
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(), user = "genome", host = "genome-msql.cse.ucsc.edu")
install.packages("RMySQL")
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(), user = "genome", host = "genome-msql.cse.ucsc.edu")
library("RMySQL", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("RMySQL")
library("RMySQL", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(c("BBmisc", "boot", "cluster", "codetools", "devtools", "foreign", "manipulate", "MASS", "Matrix", "nlme", "Rcpp"))
ucscDb <- dbConnect(MySQL(), user = "genome", host = "genome-msql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
result
hg19 <-dbConnect(MySQL(), user = "genome", db = "hg19", host = "genome-mysql.cse.ucsc.edu")
allTables <-dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
dbGetQuery(hg19, "select count(*) from acembly")
affyData <- dbReadTable(hg19, "affyU133Plus2")
warning()
warnings()
warnings(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where Mismatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query, n=10); dbClearResults(query);
affyMisSmall <- fetch(query, n=10); dbClearResult(query);
dim(affyMisSmall)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
p
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
library(ggplot2)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
data(movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
g
print(g)
summary(g)
p <- g + geom_point()
print(p)
g + geom_smooth()
p + geom_smooth()
library(dplyr)
install.packages("dplyr")
library(dplyr)
qunif(0.75,0,1)
quantile(qunif(0.75,0,1))
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
temp
mean(temp)
quantile(temp)
clear()
clear
rm()
library("jsonlite", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:jsonlite", unload=TRUE)
install.packages("jsonlite")
library("Rcpp", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("Rcpp")
install.packages("knitr")
install.packages("markdown")
install.packages("rmarkdown")
install.packages("slidify")
qnorm(mean = 1100, sd = 75)
qnorm(0.95, mean = 1100, sd = 75)
qnorm(0.95, mean = 1100, sd = 7.5)
sessionInfo()
install.packages("cacher")
setwd("Documents/Computing/Data Science/Data Science - Johns Hopkins/5 - Reproducible Research/Assignments/Assignment 1/RepData_PeerAssessment1/")
